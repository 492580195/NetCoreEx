<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Runtime.InteropServices;
using System.Globalization;

namespace NetCoreEx.Geometry {

<#
    var classes = new[] {"Size", "SizeS", "SizeF"};
    var types = new[] { "int", "short", "float" };

	var classEnum = classes.GetEnumerator();
	var typeEnum = types.GetEnumerator();

    while (classEnum.MoveNext() && typeEnum.MoveNext())
    {
        var className = classEnum.Current;
        var type = typeEnum.Current;
        #>
    [StructLayout(LayoutKind.Sequential)]
	public partial struct <#= className #> : IEquatable<<#= className #>>
	{

	    public <#= className #>(<#= type #> width, <#= type #> height)
        {
            this.Width = width;
            this.Height = height;
        }

        public bool Equals(<#= className #> other)
        {
            return (this.Width == other.Width) && (this.Height == other.Height);
        }

        public override bool Equals(object obj)
        {
            return obj is <#= className #> && this.Equals((<#= className #>)obj);
        }

        public override int GetHashCode()
        {
            unchecked { return ((int)this.Width * 397) ^ (int)this.Height; }
        }

        public <#= type #> Width;
        public <#= type #> Height;

        public static bool operator ==(<#= className #> left, <#= className #> right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(<#= className #> left, <#= className #> right)
        {
            return !(left == right);
        }

		public void Offset(<#= type #>  width, <#= type #>  height) {
			Width += width;
			Height += height;
		}

		public void Set(<#= type #>  width, <#= type #>  height) {
			Width = width;
			Height = height;
		}

		public override string ToString() {
			var culture = CultureInfo.CurrentCulture;
			return $"{{ Width = {Width.ToString(culture)}, Height = {Height.ToString(culture)} }}";
        }
		
		public bool IsEmpty => this.X == 0 && this.Y == 0;
	}

<# } #>
}
